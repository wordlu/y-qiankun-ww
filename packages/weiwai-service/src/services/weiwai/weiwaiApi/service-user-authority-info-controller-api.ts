/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserAuthorityInfoCheckPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UserAuthorityInfoGetAuthInfoByUserPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UserAuthorityInfoSavePostRequest } from '../weiwaiModel';
// @ts-ignore
import { UserAuthorityInfoSearchPostRequest } from '../weiwaiModel';
/**
 * ServiceUserAuthorityInfoControllerApi - axios parameter creator
 * @export
 */
export const ServiceUserAuthorityInfoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/check
         * @param {UserAuthorityInfoCheckPostRequest} [userAuthorityInfoCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoCheckPost: async (userAuthorityInfoCheckPostRequest?: UserAuthorityInfoCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userAuthorityInfo/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthorityInfoCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/getAuthInfoByUser
         * @param {UserAuthorityInfoGetAuthInfoByUserPostRequest} [userAuthorityInfoGetAuthInfoByUserPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoGetAuthInfoByUserPost: async (userAuthorityInfoGetAuthInfoByUserPostRequest?: UserAuthorityInfoGetAuthInfoByUserPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userAuthorityInfo/getAuthInfoByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthorityInfoGetAuthInfoByUserPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/save
         * @param {UserAuthorityInfoSavePostRequest} [userAuthorityInfoSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoSavePost: async (userAuthorityInfoSavePostRequest?: UserAuthorityInfoSavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userAuthorityInfo/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthorityInfoSavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/search
         * @param {UserAuthorityInfoSearchPostRequest} [userAuthorityInfoSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoSearchPost: async (userAuthorityInfoSearchPostRequest?: UserAuthorityInfoSearchPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userAuthorityInfo/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthorityInfoSearchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceUserAuthorityInfoControllerApi - functional programming interface
 * @export
 */
export const ServiceUserAuthorityInfoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceUserAuthorityInfoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/check
         * @param {UserAuthorityInfoCheckPostRequest} [userAuthorityInfoCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest?: UserAuthorityInfoCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/getAuthInfoByUser
         * @param {UserAuthorityInfoGetAuthInfoByUserPostRequest} [userAuthorityInfoGetAuthInfoByUserPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest?: UserAuthorityInfoGetAuthInfoByUserPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/save
         * @param {UserAuthorityInfoSavePostRequest} [userAuthorityInfoSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest?: UserAuthorityInfoSavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/search
         * @param {UserAuthorityInfoSearchPostRequest} [userAuthorityInfoSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest?: UserAuthorityInfoSearchPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceUserAuthorityInfoControllerApi - factory interface
 * @export
 */
export const ServiceUserAuthorityInfoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceUserAuthorityInfoControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/check
         * @param {UserAuthorityInfoCheckPostRequest} [userAuthorityInfoCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest?: UserAuthorityInfoCheckPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/getAuthInfoByUser
         * @param {UserAuthorityInfoGetAuthInfoByUserPostRequest} [userAuthorityInfoGetAuthInfoByUserPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest?: UserAuthorityInfoGetAuthInfoByUserPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/save
         * @param {UserAuthorityInfoSavePostRequest} [userAuthorityInfoSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest?: UserAuthorityInfoSavePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/userAuthorityInfo/search
         * @param {UserAuthorityInfoSearchPostRequest} [userAuthorityInfoSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest?: UserAuthorityInfoSearchPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceUserAuthorityInfoControllerApi - object-oriented interface
 * @export
 * @class ServiceUserAuthorityInfoControllerApi
 * @extends {BaseAPI}
 */
export class ServiceUserAuthorityInfoControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/userAuthorityInfo/check
     * @param {UserAuthorityInfoCheckPostRequest} [userAuthorityInfoCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceUserAuthorityInfoControllerApi
     */
    public userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest?: UserAuthorityInfoCheckPostRequest, options?: AxiosRequestConfig) {
        return ServiceUserAuthorityInfoControllerApiFp(this.configuration).userAuthorityInfoCheckPost(userAuthorityInfoCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/userAuthorityInfo/getAuthInfoByUser
     * @param {UserAuthorityInfoGetAuthInfoByUserPostRequest} [userAuthorityInfoGetAuthInfoByUserPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceUserAuthorityInfoControllerApi
     */
    public userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest?: UserAuthorityInfoGetAuthInfoByUserPostRequest, options?: AxiosRequestConfig) {
        return ServiceUserAuthorityInfoControllerApiFp(this.configuration).userAuthorityInfoGetAuthInfoByUserPost(userAuthorityInfoGetAuthInfoByUserPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/userAuthorityInfo/save
     * @param {UserAuthorityInfoSavePostRequest} [userAuthorityInfoSavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceUserAuthorityInfoControllerApi
     */
    public userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest?: UserAuthorityInfoSavePostRequest, options?: AxiosRequestConfig) {
        return ServiceUserAuthorityInfoControllerApiFp(this.configuration).userAuthorityInfoSavePost(userAuthorityInfoSavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/userAuthorityInfo/search
     * @param {UserAuthorityInfoSearchPostRequest} [userAuthorityInfoSearchPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceUserAuthorityInfoControllerApi
     */
    public userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest?: UserAuthorityInfoSearchPostRequest, options?: AxiosRequestConfig) {
        return ServiceUserAuthorityInfoControllerApiFp(this.configuration).userAuthorityInfoSearchPost(userAuthorityInfoSearchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
