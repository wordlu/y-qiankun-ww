/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComTreeConfigurationGetSynchroPfTreePostRequest } from '../weiwaiModel';
/**
 * ServiceComTreeConfigurationControllerApi - axios parameter creator
 * @export
 */
export const ServiceComTreeConfigurationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/add
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationAddPost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comTreeConfiguration/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getPfTreeId
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationGetPfTreeIdPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comTreeConfiguration/getPfTreeId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getSynchroPfTree
         * @param {ComTreeConfigurationGetSynchroPfTreePostRequest} [comTreeConfigurationGetSynchroPfTreePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationGetSynchroPfTreePost: async (comTreeConfigurationGetSynchroPfTreePostRequest?: ComTreeConfigurationGetSynchroPfTreePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comTreeConfiguration/getSynchroPfTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(comTreeConfigurationGetSynchroPfTreePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/productTree
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationProductTreePost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comTreeConfiguration/productTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/treeList
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationTreeListPost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comTreeConfiguration/treeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceComTreeConfigurationControllerApi - functional programming interface
 * @export
 */
export const ServiceComTreeConfigurationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceComTreeConfigurationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/add
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comTreeConfigurationAddPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comTreeConfigurationAddPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getPfTreeId
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comTreeConfigurationGetPfTreeIdPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comTreeConfigurationGetPfTreeIdPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getSynchroPfTree
         * @param {ComTreeConfigurationGetSynchroPfTreePostRequest} [comTreeConfigurationGetSynchroPfTreePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest?: ComTreeConfigurationGetSynchroPfTreePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/productTree
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comTreeConfigurationProductTreePost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comTreeConfigurationProductTreePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/treeList
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comTreeConfigurationTreeListPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comTreeConfigurationTreeListPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceComTreeConfigurationControllerApi - factory interface
 * @export
 */
export const ServiceComTreeConfigurationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceComTreeConfigurationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/add
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationAddPost(body?: string, options?: any): AxiosPromise<object> {
            return localVarFp.comTreeConfigurationAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getPfTreeId
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationGetPfTreeIdPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.comTreeConfigurationGetPfTreeIdPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/getSynchroPfTree
         * @param {ComTreeConfigurationGetSynchroPfTreePostRequest} [comTreeConfigurationGetSynchroPfTreePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest?: ComTreeConfigurationGetSynchroPfTreePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/productTree
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationProductTreePost(body?: string, options?: any): AxiosPromise<object> {
            return localVarFp.comTreeConfigurationProductTreePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/comTreeConfiguration/treeList
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comTreeConfigurationTreeListPost(body?: string, options?: any): AxiosPromise<object> {
            return localVarFp.comTreeConfigurationTreeListPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceComTreeConfigurationControllerApi - object-oriented interface
 * @export
 * @class ServiceComTreeConfigurationControllerApi
 * @extends {BaseAPI}
 */
export class ServiceComTreeConfigurationControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/comTreeConfiguration/add
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceComTreeConfigurationControllerApi
     */
    public comTreeConfigurationAddPost(body?: string, options?: AxiosRequestConfig) {
        return ServiceComTreeConfigurationControllerApiFp(this.configuration).comTreeConfigurationAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/comTreeConfiguration/getPfTreeId
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceComTreeConfigurationControllerApi
     */
    public comTreeConfigurationGetPfTreeIdPost(body?: object, options?: AxiosRequestConfig) {
        return ServiceComTreeConfigurationControllerApiFp(this.configuration).comTreeConfigurationGetPfTreeIdPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/comTreeConfiguration/getSynchroPfTree
     * @param {ComTreeConfigurationGetSynchroPfTreePostRequest} [comTreeConfigurationGetSynchroPfTreePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceComTreeConfigurationControllerApi
     */
    public comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest?: ComTreeConfigurationGetSynchroPfTreePostRequest, options?: AxiosRequestConfig) {
        return ServiceComTreeConfigurationControllerApiFp(this.configuration).comTreeConfigurationGetSynchroPfTreePost(comTreeConfigurationGetSynchroPfTreePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/comTreeConfiguration/productTree
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceComTreeConfigurationControllerApi
     */
    public comTreeConfigurationProductTreePost(body?: string, options?: AxiosRequestConfig) {
        return ServiceComTreeConfigurationControllerApiFp(this.configuration).comTreeConfigurationProductTreePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/comTreeConfiguration/treeList
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceComTreeConfigurationControllerApi
     */
    public comTreeConfigurationTreeListPost(body?: string, options?: AxiosRequestConfig) {
        return ServiceComTreeConfigurationControllerApiFp(this.configuration).comTreeConfigurationTreeListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
