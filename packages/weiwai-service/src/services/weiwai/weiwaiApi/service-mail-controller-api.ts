/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MailDownVailePostRequest } from '../weiwaiModel';
// @ts-ignore
import { MailRulesFileAnalysisPostRequest } from '../weiwaiModel';
// @ts-ignore
import { MailSearchPostRequest } from '../weiwaiModel';
// @ts-ignore
import { MasterDataManagementOrgListViewPostRequest } from '../weiwaiModel';
/**
 * ServiceMailControllerApi - axios parameter creator
 * @export
 */
export const ServiceMailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 文件校验
         * @param {MailDownVailePostRequest} [mailDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailDownVailePost: async (mailDownVailePostRequest?: MailDownVailePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/downVaile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailDownVailePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件下载
         * @param {string} id 
         * @param {string} fileDir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailDownloadPost: async (id: string, fileDir: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mailDownloadPost', 'id', id)
            // verify required parameter 'fileDir' is not null or undefined
            assertParamExists('mailDownloadPost', 'fileDir', fileDir)
            const localVarPath = `/mail/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (fileDir !== undefined) { 
                localVarFormParams.append('fileDir', fileDir as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 邮件状态下拉
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailMailStatePost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/mailState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 机构下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailOrgListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/orgList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 邮件解析
         * @param {MailRulesFileAnalysisPostRequest} [mailRulesFileAnalysisPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesFileAnalysisPost: async (mailRulesFileAnalysisPostRequest?: MailRulesFileAnalysisPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/fileAnalysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesFileAnalysisPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 源文件信息_列表查询
         * @param {MailSearchPostRequest} [mailSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailSearchPost: async (mailSearchPostRequest?: MailSearchPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailSearchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 邮件收取
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailUpdateMailPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/updateMail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看
         * @param {MasterDataManagementOrgListViewPostRequest} [masterDataManagementOrgListViewPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailViewPost: async (masterDataManagementOrgListViewPostRequest?: MasterDataManagementOrgListViewPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterDataManagementOrgListViewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceMailControllerApi - functional programming interface
 * @export
 */
export const ServiceMailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceMailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 文件校验
         * @param {MailDownVailePostRequest} [mailDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailDownVailePost(mailDownVailePostRequest?: MailDownVailePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailDownVailePost(mailDownVailePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 文件下载
         * @param {string} id 
         * @param {string} fileDir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailDownloadPost(id: string, fileDir: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailDownloadPost(id, fileDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 邮件状态下拉
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailMailStatePost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailMailStatePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 机构下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailOrgListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailOrgListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 邮件解析
         * @param {MailRulesFileAnalysisPostRequest} [mailRulesFileAnalysisPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest?: MailRulesFileAnalysisPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 源文件信息_列表查询
         * @param {MailSearchPostRequest} [mailSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailSearchPost(mailSearchPostRequest?: MailSearchPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailSearchPost(mailSearchPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 邮件收取
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailUpdateMailPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailUpdateMailPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查看
         * @param {MasterDataManagementOrgListViewPostRequest} [masterDataManagementOrgListViewPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailViewPost(masterDataManagementOrgListViewPostRequest?: MasterDataManagementOrgListViewPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailViewPost(masterDataManagementOrgListViewPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceMailControllerApi - factory interface
 * @export
 */
export const ServiceMailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceMailControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 文件校验
         * @param {MailDownVailePostRequest} [mailDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailDownVailePost(mailDownVailePostRequest?: MailDownVailePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailDownVailePost(mailDownVailePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件下载
         * @param {string} id 
         * @param {string} fileDir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailDownloadPost(id: string, fileDir: string, options?: any): AxiosPromise<object> {
            return localVarFp.mailDownloadPost(id, fileDir, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 邮件状态下拉
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailMailStatePost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.mailMailStatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 机构下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailOrgListPost(options?: any): AxiosPromise<object> {
            return localVarFp.mailOrgListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 邮件解析
         * @param {MailRulesFileAnalysisPostRequest} [mailRulesFileAnalysisPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest?: MailRulesFileAnalysisPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 源文件信息_列表查询
         * @param {MailSearchPostRequest} [mailSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailSearchPost(mailSearchPostRequest?: MailSearchPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailSearchPost(mailSearchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 邮件收取
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailUpdateMailPost(options?: any): AxiosPromise<object> {
            return localVarFp.mailUpdateMailPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看
         * @param {MasterDataManagementOrgListViewPostRequest} [masterDataManagementOrgListViewPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailViewPost(masterDataManagementOrgListViewPostRequest?: MasterDataManagementOrgListViewPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailViewPost(masterDataManagementOrgListViewPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceMailControllerApi - object-oriented interface
 * @export
 * @class ServiceMailControllerApi
 * @extends {BaseAPI}
 */
export class ServiceMailControllerApi extends BaseAPI {
    /**
     * 
     * @summary 文件校验
     * @param {MailDownVailePostRequest} [mailDownVailePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailDownVailePost(mailDownVailePostRequest?: MailDownVailePostRequest, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailDownVailePost(mailDownVailePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 文件下载
     * @param {string} id 
     * @param {string} fileDir 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailDownloadPost(id: string, fileDir: string, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailDownloadPost(id, fileDir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 邮件状态下拉
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailMailStatePost(body?: object, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailMailStatePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 机构下拉
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailOrgListPost(options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailOrgListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 邮件解析
     * @param {MailRulesFileAnalysisPostRequest} [mailRulesFileAnalysisPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest?: MailRulesFileAnalysisPostRequest, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailRulesFileAnalysisPost(mailRulesFileAnalysisPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 源文件信息_列表查询
     * @param {MailSearchPostRequest} [mailSearchPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailSearchPost(mailSearchPostRequest?: MailSearchPostRequest, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailSearchPost(mailSearchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 邮件收取
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailUpdateMailPost(options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailUpdateMailPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查看
     * @param {MasterDataManagementOrgListViewPostRequest} [masterDataManagementOrgListViewPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailControllerApi
     */
    public mailViewPost(masterDataManagementOrgListViewPostRequest?: MasterDataManagementOrgListViewPostRequest, options?: AxiosRequestConfig) {
        return ServiceMailControllerApiFp(this.configuration).mailViewPost(masterDataManagementOrgListViewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
