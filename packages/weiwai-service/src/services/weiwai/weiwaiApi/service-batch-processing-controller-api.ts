/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchMonitoringGetSourceFileLockTablePostRequest } from '../weiwaiModel';
// @ts-ignore
import { BatchMonitoringGetSourceFileOvertimePostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexExportPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexGetDataExceptionPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexGetExecuteDetailsPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexGetExecuteSituationPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexGetMailExceptionPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexGetTitleMessagePostRequest } from '../weiwaiModel';
/**
 * ServiceBatchProcessingControllerApi - axios parameter creator
 * @export
 */
export const ServiceBatchProcessingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 4.饼图数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetEachartsForBPost: async (batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchMonitoring/getEachartsForB`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchMonitoringGetSourceFileLockTablePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 6.柱形数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetEachartsForZPost: async (batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchMonitoring/getEachartsForZ`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchMonitoringGetSourceFileLockTablePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 3.未完成明细
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetIncompleteDetailsPost: async (batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchMonitoring/getIncompleteDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchMonitoringGetSourceFileLockTablePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2.锁表后收取源文件
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetSourceFileLockTablePost: async (batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchMonitoring/getSourceFileLockTable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchMonitoringGetSourceFileLockTablePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 1.时效内未收取源文件
         * @param {BatchMonitoringGetSourceFileOvertimePostRequest} [batchMonitoringGetSourceFileOvertimePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetSourceFileOvertimePost: async (batchMonitoringGetSourceFileOvertimePostRequest?: BatchMonitoringGetSourceFileOvertimePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchMonitoring/getSourceFileOvertime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchMonitoringGetSourceFileOvertimePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 7.脚本导出--json
         * @param {IndexExportPostRequest} [indexExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexExportPost: async (indexExportPostRequest?: IndexExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 3.数据处理异常表-新版
         * @param {IndexGetDataExceptionPostRequest} [indexGetDataExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetDataExceptionPost: async (indexGetDataExceptionPostRequest?: IndexGetDataExceptionPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getDataException`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetDataExceptionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 6.脚本运行详情
         * @param {IndexGetExecuteDetailsPostRequest} [indexGetExecuteDetailsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetExecuteDetailsPost: async (indexGetExecuteDetailsPostRequest?: IndexGetExecuteDetailsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getExecuteDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetExecuteDetailsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 5.脚本运行情况
         * @param {IndexGetExecuteSituationPostRequest} [indexGetExecuteSituationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetExecuteSituationPost: async (indexGetExecuteSituationPostRequest?: IndexGetExecuteSituationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getExecuteSituation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetExecuteSituationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 1.文件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetFileExceptionPost: async (indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getFileException`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetMailExceptionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2.邮件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetMailExceptionPost: async (indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getMailException`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetMailExceptionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 4.开头展示信息-新版
         * @param {IndexGetTitleMessagePostRequest} [indexGetTitleMessagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetTitleMessagePost: async (indexGetTitleMessagePostRequest?: IndexGetTitleMessagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/getTitleMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexGetTitleMessagePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceBatchProcessingControllerApi - functional programming interface
 * @export
 */
export const ServiceBatchProcessingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceBatchProcessingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 4.饼图数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 6.柱形数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 3.未完成明细
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 2.锁表后收取源文件
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 1.时效内未收取源文件
         * @param {BatchMonitoringGetSourceFileOvertimePostRequest} [batchMonitoringGetSourceFileOvertimePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest?: BatchMonitoringGetSourceFileOvertimePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 7.脚本导出--json
         * @param {IndexExportPostRequest} [indexExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexExportPost(indexExportPostRequest?: IndexExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexExportPost(indexExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 3.数据处理异常表-新版
         * @param {IndexGetDataExceptionPostRequest} [indexGetDataExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetDataExceptionPost(indexGetDataExceptionPostRequest?: IndexGetDataExceptionPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetDataExceptionPost(indexGetDataExceptionPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 6.脚本运行详情
         * @param {IndexGetExecuteDetailsPostRequest} [indexGetExecuteDetailsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest?: IndexGetExecuteDetailsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 5.脚本运行情况
         * @param {IndexGetExecuteSituationPostRequest} [indexGetExecuteSituationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest?: IndexGetExecuteSituationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 1.文件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetFileExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetFileExceptionPost(indexGetMailExceptionPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 2.邮件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetMailExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetMailExceptionPost(indexGetMailExceptionPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 4.开头展示信息-新版
         * @param {IndexGetTitleMessagePostRequest} [indexGetTitleMessagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGetTitleMessagePost(indexGetTitleMessagePostRequest?: IndexGetTitleMessagePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGetTitleMessagePost(indexGetTitleMessagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceBatchProcessingControllerApi - factory interface
 * @export
 */
export const ServiceBatchProcessingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceBatchProcessingControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 4.饼图数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 6.柱形数据
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 3.未完成明细
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 2.锁表后收取源文件
         * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 1.时效内未收取源文件
         * @param {BatchMonitoringGetSourceFileOvertimePostRequest} [batchMonitoringGetSourceFileOvertimePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest?: BatchMonitoringGetSourceFileOvertimePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 7.脚本导出--json
         * @param {IndexExportPostRequest} [indexExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexExportPost(indexExportPostRequest?: IndexExportPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexExportPost(indexExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 3.数据处理异常表-新版
         * @param {IndexGetDataExceptionPostRequest} [indexGetDataExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetDataExceptionPost(indexGetDataExceptionPostRequest?: IndexGetDataExceptionPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetDataExceptionPost(indexGetDataExceptionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 6.脚本运行详情
         * @param {IndexGetExecuteDetailsPostRequest} [indexGetExecuteDetailsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest?: IndexGetExecuteDetailsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 5.脚本运行情况
         * @param {IndexGetExecuteSituationPostRequest} [indexGetExecuteSituationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest?: IndexGetExecuteSituationPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 1.文件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetFileExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetFileExceptionPost(indexGetMailExceptionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 2.邮件接收异常表-新版
         * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetMailExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetMailExceptionPost(indexGetMailExceptionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 4.开头展示信息-新版
         * @param {IndexGetTitleMessagePostRequest} [indexGetTitleMessagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGetTitleMessagePost(indexGetTitleMessagePostRequest?: IndexGetTitleMessagePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexGetTitleMessagePost(indexGetTitleMessagePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceBatchProcessingControllerApi - object-oriented interface
 * @export
 * @class ServiceBatchProcessingControllerApi
 * @extends {BaseAPI}
 */
export class ServiceBatchProcessingControllerApi extends BaseAPI {
    /**
     * 
     * @summary 4.饼图数据
     * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).batchMonitoringGetEachartsForBPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 6.柱形数据
     * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).batchMonitoringGetEachartsForZPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 3.未完成明细
     * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).batchMonitoringGetIncompleteDetailsPost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 2.锁表后收取源文件
     * @param {BatchMonitoringGetSourceFileLockTablePostRequest} [batchMonitoringGetSourceFileLockTablePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest?: BatchMonitoringGetSourceFileLockTablePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).batchMonitoringGetSourceFileLockTablePost(batchMonitoringGetSourceFileLockTablePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 1.时效内未收取源文件
     * @param {BatchMonitoringGetSourceFileOvertimePostRequest} [batchMonitoringGetSourceFileOvertimePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest?: BatchMonitoringGetSourceFileOvertimePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).batchMonitoringGetSourceFileOvertimePost(batchMonitoringGetSourceFileOvertimePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 7.脚本导出--json
     * @param {IndexExportPostRequest} [indexExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexExportPost(indexExportPostRequest?: IndexExportPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexExportPost(indexExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 3.数据处理异常表-新版
     * @param {IndexGetDataExceptionPostRequest} [indexGetDataExceptionPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetDataExceptionPost(indexGetDataExceptionPostRequest?: IndexGetDataExceptionPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetDataExceptionPost(indexGetDataExceptionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 6.脚本运行详情
     * @param {IndexGetExecuteDetailsPostRequest} [indexGetExecuteDetailsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest?: IndexGetExecuteDetailsPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetExecuteDetailsPost(indexGetExecuteDetailsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 5.脚本运行情况
     * @param {IndexGetExecuteSituationPostRequest} [indexGetExecuteSituationPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest?: IndexGetExecuteSituationPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetExecuteSituationPost(indexGetExecuteSituationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 1.文件接收异常表-新版
     * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetFileExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetFileExceptionPost(indexGetMailExceptionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 2.邮件接收异常表-新版
     * @param {IndexGetMailExceptionPostRequest} [indexGetMailExceptionPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetMailExceptionPost(indexGetMailExceptionPostRequest?: IndexGetMailExceptionPostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetMailExceptionPost(indexGetMailExceptionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 4.开头展示信息-新版
     * @param {IndexGetTitleMessagePostRequest} [indexGetTitleMessagePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceBatchProcessingControllerApi
     */
    public indexGetTitleMessagePost(indexGetTitleMessagePostRequest?: IndexGetTitleMessagePostRequest, options?: AxiosRequestConfig) {
        return ServiceBatchProcessingControllerApiFp(this.configuration).indexGetTitleMessagePost(indexGetTitleMessagePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
