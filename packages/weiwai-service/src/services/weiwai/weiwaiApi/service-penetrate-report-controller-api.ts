/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PenetrateReportGetListPostRequest } from '../weiwaiModel';
/**
 * ServicePenetrateReportControllerApi - axios parameter creator
 * @export
 */
export const ServicePenetrateReportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportExportExcelPost: async (penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/penetrateReport/exportExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(penetrateReportGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportMergeExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportExportMergeExcelPost: async (penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/penetrateReport/exportMergeExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(penetrateReportGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/getList
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportGetListPost: async (penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/penetrateReport/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(penetrateReportGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicePenetrateReportControllerApi - functional programming interface
 * @export
 */
export const ServicePenetrateReportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicePenetrateReportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async penetrateReportExportExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.penetrateReportExportExcelPost(penetrateReportGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportMergeExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/getList
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async penetrateReportGetListPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.penetrateReportGetListPost(penetrateReportGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicePenetrateReportControllerApi - factory interface
 * @export
 */
export const ServicePenetrateReportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicePenetrateReportControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportExportExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.penetrateReportExportExcelPost(penetrateReportGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/exportMergeExcel
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/penetrateReport/getList
         * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penetrateReportGetListPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.penetrateReportGetListPost(penetrateReportGetListPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServicePenetrateReportControllerApi - object-oriented interface
 * @export
 * @class ServicePenetrateReportControllerApi
 * @extends {BaseAPI}
 */
export class ServicePenetrateReportControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/penetrateReport/exportExcel
     * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicePenetrateReportControllerApi
     */
    public penetrateReportExportExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig) {
        return ServicePenetrateReportControllerApiFp(this.configuration).penetrateReportExportExcelPost(penetrateReportGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/penetrateReport/exportMergeExcel
     * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicePenetrateReportControllerApi
     */
    public penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig) {
        return ServicePenetrateReportControllerApiFp(this.configuration).penetrateReportExportMergeExcelPost(penetrateReportGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/penetrateReport/getList
     * @param {PenetrateReportGetListPostRequest} [penetrateReportGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicePenetrateReportControllerApi
     */
    public penetrateReportGetListPost(penetrateReportGetListPostRequest?: PenetrateReportGetListPostRequest, options?: AxiosRequestConfig) {
        return ServicePenetrateReportControllerApiFp(this.configuration).penetrateReportGetListPost(penetrateReportGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
