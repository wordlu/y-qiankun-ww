/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DicAddPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicAllByClassIdPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicAllListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicAllPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicEditPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicFindCloumPostRequest } from '../weiwaiModel';
// @ts-ignore
import { DicStatePostRequest } from '../weiwaiModel';
/**
 * ServiceDictControllerApi - axios parameter creator
 * @export
 */
export const ServiceDictControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/add
         * @param {DicAddPostRequest} [dicAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAddPost: async (dicAddPostRequest?: DicAddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicAddPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 状态下拉
         * @param {DicAllByClassIdPostRequest} [dicAllByClassIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllByClassIdPost: async (dicAllByClassIdPostRequest?: DicAllByClassIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/allByClassId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicAllByClassIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/allList
         * @param {DicAllListPostRequest} [dicAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllListPost: async (dicAllListPostRequest?: DicAllListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/allList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicAllListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/all
         * @param {DicAllPostRequest} [dicAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllPost: async (dicAllPostRequest?: DicAllPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicAllPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/edit
         * @param {DicEditPostRequest} [dicEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicEditPost: async (dicEditPostRequest?: DicEditPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicEditPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/findCloum
         * @param {DicFindCloumPostRequest} [dicFindCloumPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicFindCloumPost: async (dicFindCloumPostRequest?: DicFindCloumPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/findCloum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicFindCloumPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/state
         * @param {DicStatePostRequest} [dicStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicStatePost: async (dicStatePostRequest?: DicStatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dic/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dicStatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceDictControllerApi - functional programming interface
 * @export
 */
export const ServiceDictControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceDictControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/add
         * @param {DicAddPostRequest} [dicAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicAddPost(dicAddPostRequest?: DicAddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicAddPost(dicAddPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 状态下拉
         * @param {DicAllByClassIdPostRequest} [dicAllByClassIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicAllByClassIdPost(dicAllByClassIdPostRequest?: DicAllByClassIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicAllByClassIdPost(dicAllByClassIdPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/allList
         * @param {DicAllListPostRequest} [dicAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicAllListPost(dicAllListPostRequest?: DicAllListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicAllListPost(dicAllListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/all
         * @param {DicAllPostRequest} [dicAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicAllPost(dicAllPostRequest?: DicAllPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicAllPost(dicAllPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/edit
         * @param {DicEditPostRequest} [dicEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicEditPost(dicEditPostRequest?: DicEditPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicEditPost(dicEditPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/findCloum
         * @param {DicFindCloumPostRequest} [dicFindCloumPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicFindCloumPost(dicFindCloumPostRequest?: DicFindCloumPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicFindCloumPost(dicFindCloumPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/state
         * @param {DicStatePostRequest} [dicStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dicStatePost(dicStatePostRequest?: DicStatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dicStatePost(dicStatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceDictControllerApi - factory interface
 * @export
 */
export const ServiceDictControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceDictControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/add
         * @param {DicAddPostRequest} [dicAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAddPost(dicAddPostRequest?: DicAddPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicAddPost(dicAddPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 状态下拉
         * @param {DicAllByClassIdPostRequest} [dicAllByClassIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllByClassIdPost(dicAllByClassIdPostRequest?: DicAllByClassIdPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicAllByClassIdPost(dicAllByClassIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/allList
         * @param {DicAllListPostRequest} [dicAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllListPost(dicAllListPostRequest?: DicAllListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicAllListPost(dicAllListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/all
         * @param {DicAllPostRequest} [dicAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicAllPost(dicAllPostRequest?: DicAllPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicAllPost(dicAllPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/edit
         * @param {DicEditPostRequest} [dicEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicEditPost(dicEditPostRequest?: DicEditPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicEditPost(dicEditPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/findCloum
         * @param {DicFindCloumPostRequest} [dicFindCloumPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicFindCloumPost(dicFindCloumPostRequest?: DicFindCloumPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicFindCloumPost(dicFindCloumPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/dic/state
         * @param {DicStatePostRequest} [dicStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dicStatePost(dicStatePostRequest?: DicStatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.dicStatePost(dicStatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceDictControllerApi - object-oriented interface
 * @export
 * @class ServiceDictControllerApi
 * @extends {BaseAPI}
 */
export class ServiceDictControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/dic/add
     * @param {DicAddPostRequest} [dicAddPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicAddPost(dicAddPostRequest?: DicAddPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicAddPost(dicAddPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 状态下拉
     * @param {DicAllByClassIdPostRequest} [dicAllByClassIdPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicAllByClassIdPost(dicAllByClassIdPostRequest?: DicAllByClassIdPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicAllByClassIdPost(dicAllByClassIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/dic/allList
     * @param {DicAllListPostRequest} [dicAllListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicAllListPost(dicAllListPostRequest?: DicAllListPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicAllListPost(dicAllListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/dic/all
     * @param {DicAllPostRequest} [dicAllPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicAllPost(dicAllPostRequest?: DicAllPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicAllPost(dicAllPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/dic/edit
     * @param {DicEditPostRequest} [dicEditPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicEditPost(dicEditPostRequest?: DicEditPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicEditPost(dicEditPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/dic/findCloum
     * @param {DicFindCloumPostRequest} [dicFindCloumPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicFindCloumPost(dicFindCloumPostRequest?: DicFindCloumPostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicFindCloumPost(dicFindCloumPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/dic/state
     * @param {DicStatePostRequest} [dicStatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDictControllerApi
     */
    public dicStatePost(dicStatePostRequest?: DicStatePostRequest, options?: AxiosRequestConfig) {
        return ServiceDictControllerApiFp(this.configuration).dicStatePost(dicStatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
