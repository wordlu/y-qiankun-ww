/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FilesDeleteFilePostRequest } from '../weiwaiModel';
// @ts-ignore
import { FilesDownloadFilePostRequest } from '../weiwaiModel';
// @ts-ignore
import { FilesGetFileListPostRequest } from '../weiwaiModel';
/**
 * ServiceFileControllerApi - axios parameter creator
 * @export
 */
export const ServiceFileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 文件删除
         * @param {FilesDeleteFilePostRequest} [filesDeleteFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDeleteFilePost: async (filesDeleteFilePostRequest?: FilesDeleteFilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/deleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesDeleteFilePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件校验
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDownVailePost: async (filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/downVaile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesDownloadFilePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件下载
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDownloadFilePost: async (filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/downloadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesDownloadFilePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 源文件管理_查询
         * @param {FilesGetFileListPostRequest} [filesGetFileListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesGetFileListPost: async (filesGetFileListPostRequest?: FilesGetFileListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/getFileList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesGetFileListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件路径下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPathListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/pathList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件上传
         * @param {string} contentType 
         * @param {File} file 
         * @param {string} rootPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesUploadFilePost: async (contentType: string, file: File, rootPath: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('filesUploadFilePost', 'contentType', contentType)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('filesUploadFilePost', 'file', file)
            // verify required parameter 'rootPath' is not null or undefined
            assertParamExists('filesUploadFilePost', 'rootPath', rootPath)
            const localVarPath = `/files/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (rootPath !== undefined) { 
                localVarFormParams.append('rootPath', rootPath as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceFileControllerApi - functional programming interface
 * @export
 */
export const ServiceFileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceFileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 文件删除
         * @param {FilesDeleteFilePostRequest} [filesDeleteFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDeleteFilePost(filesDeleteFilePostRequest?: FilesDeleteFilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDeleteFilePost(filesDeleteFilePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 文件校验
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDownVailePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDownVailePost(filesDownloadFilePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 文件下载
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDownloadFilePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDownloadFilePost(filesDownloadFilePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 源文件管理_查询
         * @param {FilesGetFileListPostRequest} [filesGetFileListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesGetFileListPost(filesGetFileListPostRequest?: FilesGetFileListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesGetFileListPost(filesGetFileListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 文件路径下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesPathListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesPathListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 文件上传
         * @param {string} contentType 
         * @param {File} file 
         * @param {string} rootPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesUploadFilePost(contentType: string, file: File, rootPath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesUploadFilePost(contentType, file, rootPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceFileControllerApi - factory interface
 * @export
 */
export const ServiceFileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceFileControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 文件删除
         * @param {FilesDeleteFilePostRequest} [filesDeleteFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDeleteFilePost(filesDeleteFilePostRequest?: FilesDeleteFilePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.filesDeleteFilePost(filesDeleteFilePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件校验
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDownVailePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.filesDownVailePost(filesDownloadFilePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件下载
         * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDownloadFilePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.filesDownloadFilePost(filesDownloadFilePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 源文件管理_查询
         * @param {FilesGetFileListPostRequest} [filesGetFileListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesGetFileListPost(filesGetFileListPostRequest?: FilesGetFileListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.filesGetFileListPost(filesGetFileListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件路径下拉
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPathListPost(options?: any): AxiosPromise<object> {
            return localVarFp.filesPathListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件上传
         * @param {string} contentType 
         * @param {File} file 
         * @param {string} rootPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesUploadFilePost(contentType: string, file: File, rootPath: string, options?: any): AxiosPromise<object> {
            return localVarFp.filesUploadFilePost(contentType, file, rootPath, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceFileControllerApi - object-oriented interface
 * @export
 * @class ServiceFileControllerApi
 * @extends {BaseAPI}
 */
export class ServiceFileControllerApi extends BaseAPI {
    /**
     * 
     * @summary 文件删除
     * @param {FilesDeleteFilePostRequest} [filesDeleteFilePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesDeleteFilePost(filesDeleteFilePostRequest?: FilesDeleteFilePostRequest, options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesDeleteFilePost(filesDeleteFilePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 文件校验
     * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesDownVailePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesDownVailePost(filesDownloadFilePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 文件下载
     * @param {FilesDownloadFilePostRequest} [filesDownloadFilePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesDownloadFilePost(filesDownloadFilePostRequest?: FilesDownloadFilePostRequest, options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesDownloadFilePost(filesDownloadFilePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 源文件管理_查询
     * @param {FilesGetFileListPostRequest} [filesGetFileListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesGetFileListPost(filesGetFileListPostRequest?: FilesGetFileListPostRequest, options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesGetFileListPost(filesGetFileListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 文件路径下拉
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesPathListPost(options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesPathListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 文件上传
     * @param {string} contentType 
     * @param {File} file 
     * @param {string} rootPath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceFileControllerApi
     */
    public filesUploadFilePost(contentType: string, file: File, rootPath: string, options?: AxiosRequestConfig) {
        return ServiceFileControllerApiFp(this.configuration).filesUploadFilePost(contentType, file, rootPath, options).then((request) => request(this.axios, this.basePath));
    }
}
