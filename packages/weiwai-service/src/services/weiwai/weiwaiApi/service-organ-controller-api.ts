/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UsersAddPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UsersAllListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UsersAllPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UsersEditPostRequest } from '../weiwaiModel';
// @ts-ignore
import { UsersStatePostRequest } from '../weiwaiModel';
/**
 * ServiceOrganControllerApi - axios parameter creator
 * @export
 */
export const ServiceOrganControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/users/add
         * @param {UsersAddPostRequest} [usersAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAddPost: async (usersAddPostRequest?: UsersAddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersAddPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/allList
         * @param {UsersAllListPostRequest} [usersAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAllListPost: async (usersAllListPostRequest?: UsersAllListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/allList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersAllListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/all
         * @param {UsersAllPostRequest} [usersAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAllPost: async (usersAllPostRequest?: UsersAllPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersAllPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/edit
         * @param {UsersEditPostRequest} [usersEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEditPost: async (usersEditPostRequest?: UsersEditPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersEditPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/queryOrgName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQueryOrgNamePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/queryOrgName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/state
         * @param {UsersStatePostRequest} [usersStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersStatePost: async (usersStatePostRequest?: UsersStatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersStatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceOrganControllerApi - functional programming interface
 * @export
 */
export const ServiceOrganControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceOrganControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/users/add
         * @param {UsersAddPostRequest} [usersAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAddPost(usersAddPostRequest?: UsersAddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAddPost(usersAddPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/allList
         * @param {UsersAllListPostRequest} [usersAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAllListPost(usersAllListPostRequest?: UsersAllListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAllListPost(usersAllListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/all
         * @param {UsersAllPostRequest} [usersAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAllPost(usersAllPostRequest?: UsersAllPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAllPost(usersAllPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/edit
         * @param {UsersEditPostRequest} [usersEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersEditPost(usersEditPostRequest?: UsersEditPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersEditPost(usersEditPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/queryOrgName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersQueryOrgNamePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersQueryOrgNamePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/state
         * @param {UsersStatePostRequest} [usersStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersStatePost(usersStatePostRequest?: UsersStatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersStatePost(usersStatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceOrganControllerApi - factory interface
 * @export
 */
export const ServiceOrganControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceOrganControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/users/add
         * @param {UsersAddPostRequest} [usersAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAddPost(usersAddPostRequest?: UsersAddPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.usersAddPost(usersAddPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/allList
         * @param {UsersAllListPostRequest} [usersAllListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAllListPost(usersAllListPostRequest?: UsersAllListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.usersAllListPost(usersAllListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/all
         * @param {UsersAllPostRequest} [usersAllPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAllPost(usersAllPostRequest?: UsersAllPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.usersAllPost(usersAllPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/edit
         * @param {UsersEditPostRequest} [usersEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEditPost(usersEditPostRequest?: UsersEditPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.usersEditPost(usersEditPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/queryOrgName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQueryOrgNamePost(options?: any): AxiosPromise<object> {
            return localVarFp.usersQueryOrgNamePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/users/state
         * @param {UsersStatePostRequest} [usersStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersStatePost(usersStatePostRequest?: UsersStatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.usersStatePost(usersStatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceOrganControllerApi - object-oriented interface
 * @export
 * @class ServiceOrganControllerApi
 * @extends {BaseAPI}
 */
export class ServiceOrganControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/users/add
     * @param {UsersAddPostRequest} [usersAddPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersAddPost(usersAddPostRequest?: UsersAddPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersAddPost(usersAddPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/users/allList
     * @param {UsersAllListPostRequest} [usersAllListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersAllListPost(usersAllListPostRequest?: UsersAllListPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersAllListPost(usersAllListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/users/all
     * @param {UsersAllPostRequest} [usersAllPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersAllPost(usersAllPostRequest?: UsersAllPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersAllPost(usersAllPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/users/edit
     * @param {UsersEditPostRequest} [usersEditPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersEditPost(usersEditPostRequest?: UsersEditPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersEditPost(usersEditPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/users/queryOrgName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersQueryOrgNamePost(options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersQueryOrgNamePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/users/state
     * @param {UsersStatePostRequest} [usersStatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrganControllerApi
     */
    public usersStatePost(usersStatePostRequest?: UsersStatePostRequest, options?: AxiosRequestConfig) {
        return ServiceOrganControllerApiFp(this.configuration).usersStatePost(usersStatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
