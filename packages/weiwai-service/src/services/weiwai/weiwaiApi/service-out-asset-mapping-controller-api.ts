/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrgSubjTypeIgnoreMappingPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingCheckPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingExportPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingGetSecListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingInfoPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingOutAssetMappingSavePostRequest } from '../weiwaiModel';
// @ts-ignore
import { OutAssetMappingUpdatePostRequest } from '../weiwaiModel';
/**
 * ServiceOutAssetMappingControllerApi - axios parameter creator
 * @export
 */
export const ServiceOutAssetMappingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {OutAssetMappingCheckPostRequest} [outAssetMappingCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingCheckPost: async (outAssetMappingCheckPostRequest?: OutAssetMappingCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingDisablePost: async (orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeIgnoreMappingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导出
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingExportPost: async (outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 委外资产映射_列表查询
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingGetListPost: async (outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 标准资产详细信息查询
         * @param {OutAssetMappingGetSecListPostRequest} [outAssetMappingGetSecListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingGetSecListPost: async (outAssetMappingGetSecListPostRequest?: OutAssetMappingGetSecListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/getSecList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingGetSecListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看
         * @param {OutAssetMappingInfoPostRequest} [outAssetMappingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingInfoPost: async (outAssetMappingInfoPostRequest?: OutAssetMappingInfoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingInfoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增
         * @param {OutAssetMappingOutAssetMappingSavePostRequest} [outAssetMappingOutAssetMappingSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingOutAssetMappingSavePost: async (outAssetMappingOutAssetMappingSavePostRequest?: OutAssetMappingOutAssetMappingSavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/outAssetMappingSave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingOutAssetMappingSavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑
         * @param {OutAssetMappingUpdatePostRequest} [outAssetMappingUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingUpdatePost: async (outAssetMappingUpdatePostRequest?: OutAssetMappingUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outAssetMapping/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(outAssetMappingUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceOutAssetMappingControllerApi - functional programming interface
 * @export
 */
export const ServiceOutAssetMappingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceOutAssetMappingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {OutAssetMappingCheckPostRequest} [outAssetMappingCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingCheckPost(outAssetMappingCheckPostRequest?: OutAssetMappingCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingCheckPost(outAssetMappingCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 导出
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingExportPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingExportPost(outAssetMappingExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 委外资产映射_列表查询
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingGetListPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingGetListPost(outAssetMappingExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 标准资产详细信息查询
         * @param {OutAssetMappingGetSecListPostRequest} [outAssetMappingGetSecListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest?: OutAssetMappingGetSecListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查看
         * @param {OutAssetMappingInfoPostRequest} [outAssetMappingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingInfoPost(outAssetMappingInfoPostRequest?: OutAssetMappingInfoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingInfoPost(outAssetMappingInfoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增
         * @param {OutAssetMappingOutAssetMappingSavePostRequest} [outAssetMappingOutAssetMappingSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest?: OutAssetMappingOutAssetMappingSavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 编辑
         * @param {OutAssetMappingUpdatePostRequest} [outAssetMappingUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest?: OutAssetMappingUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceOutAssetMappingControllerApi - factory interface
 * @export
 */
export const ServiceOutAssetMappingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceOutAssetMappingControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {OutAssetMappingCheckPostRequest} [outAssetMappingCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingCheckPost(outAssetMappingCheckPostRequest?: OutAssetMappingCheckPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingCheckPost(outAssetMappingCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导出
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingExportPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingExportPost(outAssetMappingExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 委外资产映射_列表查询
         * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingGetListPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingGetListPost(outAssetMappingExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 标准资产详细信息查询
         * @param {OutAssetMappingGetSecListPostRequest} [outAssetMappingGetSecListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest?: OutAssetMappingGetSecListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看
         * @param {OutAssetMappingInfoPostRequest} [outAssetMappingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingInfoPost(outAssetMappingInfoPostRequest?: OutAssetMappingInfoPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingInfoPost(outAssetMappingInfoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增
         * @param {OutAssetMappingOutAssetMappingSavePostRequest} [outAssetMappingOutAssetMappingSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest?: OutAssetMappingOutAssetMappingSavePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑
         * @param {OutAssetMappingUpdatePostRequest} [outAssetMappingUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest?: OutAssetMappingUpdatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceOutAssetMappingControllerApi - object-oriented interface
 * @export
 * @class ServiceOutAssetMappingControllerApi
 * @extends {BaseAPI}
 */
export class ServiceOutAssetMappingControllerApi extends BaseAPI {
    /**
     * 
     * @summary 审核、反审核
     * @param {OutAssetMappingCheckPostRequest} [outAssetMappingCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingCheckPost(outAssetMappingCheckPostRequest?: OutAssetMappingCheckPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingCheckPost(outAssetMappingCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 忽略
     * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingDisablePost(orgSubjTypeIgnoreMappingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 导出
     * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingExportPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingExportPost(outAssetMappingExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 委外资产映射_列表查询
     * @param {OutAssetMappingExportPostRequest} [outAssetMappingExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingGetListPost(outAssetMappingExportPostRequest?: OutAssetMappingExportPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingGetListPost(outAssetMappingExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 标准资产详细信息查询
     * @param {OutAssetMappingGetSecListPostRequest} [outAssetMappingGetSecListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest?: OutAssetMappingGetSecListPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingGetSecListPost(outAssetMappingGetSecListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查看
     * @param {OutAssetMappingInfoPostRequest} [outAssetMappingInfoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingInfoPost(outAssetMappingInfoPostRequest?: OutAssetMappingInfoPostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingInfoPost(outAssetMappingInfoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增
     * @param {OutAssetMappingOutAssetMappingSavePostRequest} [outAssetMappingOutAssetMappingSavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest?: OutAssetMappingOutAssetMappingSavePostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingOutAssetMappingSavePost(outAssetMappingOutAssetMappingSavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑
     * @param {OutAssetMappingUpdatePostRequest} [outAssetMappingUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOutAssetMappingControllerApi
     */
    public outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest?: OutAssetMappingUpdatePostRequest, options?: AxiosRequestConfig) {
        return ServiceOutAssetMappingControllerApiFp(this.configuration).outAssetMappingUpdatePost(outAssetMappingUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
