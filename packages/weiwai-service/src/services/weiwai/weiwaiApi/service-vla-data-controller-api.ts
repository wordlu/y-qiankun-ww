/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PenerateDataLockGetPenarateListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { ValDataLockGetVlaListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { ValDataLockLockValPostRequest } from '../weiwaiModel';
/**
 * ServiceVlaDataControllerApi - axios parameter creator
 * @export
 */
export const ServiceVlaDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 5.净值列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        netDataLockGetListPost: async (penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/netDataLock/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(penerateDataLockGetPenarateListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2.净值锁定状态
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        netDataLockLockValPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/netDataLock/lockVal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 4.穿透列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penerateDataLockGetPenarateListPost: async (penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/penerateDataLock/getPenarateList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(penerateDataLockGetPenarateListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 1.穿透锁定状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penerateDataLockLockPeneratePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/penerateDataLock/lockPenerate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 6.gu估值查询-T
         * @param {ValDataLockGetVlaListPostRequest} [valDataLockGetVlaListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valDataLockGetVlaListPost: async (valDataLockGetVlaListPostRequest?: ValDataLockGetVlaListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/valDataLock/getVlaList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(valDataLockGetVlaListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 3.估值锁定状态锁定-T
         * @param {ValDataLockLockValPostRequest} [valDataLockLockValPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valDataLockLockValPost: async (valDataLockLockValPostRequest?: ValDataLockLockValPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/valDataLock/lockVal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(valDataLockLockValPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceVlaDataControllerApi - functional programming interface
 * @export
 */
export const ServiceVlaDataControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceVlaDataControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 5.净值列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 2.净值锁定状态
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async netDataLockLockValPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.netDataLockLockValPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 4.穿透列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 1.穿透锁定状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async penerateDataLockLockPeneratePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.penerateDataLockLockPeneratePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 6.gu估值查询-T
         * @param {ValDataLockGetVlaListPostRequest} [valDataLockGetVlaListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest?: ValDataLockGetVlaListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 3.估值锁定状态锁定-T
         * @param {ValDataLockLockValPostRequest} [valDataLockLockValPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valDataLockLockValPost(valDataLockLockValPostRequest?: ValDataLockLockValPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valDataLockLockValPost(valDataLockLockValPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceVlaDataControllerApi - factory interface
 * @export
 */
export const ServiceVlaDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceVlaDataControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 5.净值列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 2.净值锁定状态
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        netDataLockLockValPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.netDataLockLockValPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 4.穿透列表查询
         * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 1.穿透锁定状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        penerateDataLockLockPeneratePost(options?: any): AxiosPromise<object> {
            return localVarFp.penerateDataLockLockPeneratePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 6.gu估值查询-T
         * @param {ValDataLockGetVlaListPostRequest} [valDataLockGetVlaListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest?: ValDataLockGetVlaListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 3.估值锁定状态锁定-T
         * @param {ValDataLockLockValPostRequest} [valDataLockLockValPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valDataLockLockValPost(valDataLockLockValPostRequest?: ValDataLockLockValPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.valDataLockLockValPost(valDataLockLockValPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceVlaDataControllerApi - object-oriented interface
 * @export
 * @class ServiceVlaDataControllerApi
 * @extends {BaseAPI}
 */
export class ServiceVlaDataControllerApi extends BaseAPI {
    /**
     * 
     * @summary 5.净值列表查询
     * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).netDataLockGetListPost(penerateDataLockGetPenarateListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 2.净值锁定状态
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public netDataLockLockValPost(body?: object, options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).netDataLockLockValPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 4.穿透列表查询
     * @param {PenerateDataLockGetPenarateListPostRequest} [penerateDataLockGetPenarateListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest?: PenerateDataLockGetPenarateListPostRequest, options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).penerateDataLockGetPenarateListPost(penerateDataLockGetPenarateListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 1.穿透锁定状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public penerateDataLockLockPeneratePost(options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).penerateDataLockLockPeneratePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 6.gu估值查询-T
     * @param {ValDataLockGetVlaListPostRequest} [valDataLockGetVlaListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest?: ValDataLockGetVlaListPostRequest, options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).valDataLockGetVlaListPost(valDataLockGetVlaListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 3.估值锁定状态锁定-T
     * @param {ValDataLockLockValPostRequest} [valDataLockLockValPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceVlaDataControllerApi
     */
    public valDataLockLockValPost(valDataLockLockValPostRequest?: ValDataLockLockValPostRequest, options?: AxiosRequestConfig) {
        return ServiceVlaDataControllerApiFp(this.configuration).valDataLockLockValPost(valDataLockLockValPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
