/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubjectDeletePostRequestInner } from '../weiwaiModel';
// @ts-ignore
import { SubjectGetSubjectListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { SubjectSubjectCheckPostRequestInner } from '../weiwaiModel';
// @ts-ignore
import { SubjectSubjectSavePostRequestInner } from '../weiwaiModel';
// @ts-ignore
import { SubjectSubjectUpdatePostRequestInner } from '../weiwaiModel';
/**
 * ServiceSubjectControllerApi - axios parameter creator
 * @export
 */
export const ServiceSubjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除
         * @param {Array<SubjectDeletePostRequestInner>} [subjectDeletePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectDeletePost: async (subjectDeletePostRequestInner?: Array<SubjectDeletePostRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDeletePostRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 科目体系维护_列表查询
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectGetSubjectListPost: async (subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/getSubjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectGetSubjectListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量审核×
         * @param {Array<SubjectSubjectCheckPostRequestInner>} [subjectSubjectCheckPostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectCheckPost: async (subjectSubjectCheckPostRequestInner?: Array<SubjectSubjectCheckPostRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/subjectCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectSubjectCheckPostRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导出
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectExportPost: async (subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/subjectExport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectGetSubjectListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新加
         * @param {Array<SubjectSubjectSavePostRequestInner>} [subjectSubjectSavePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectSavePost: async (subjectSubjectSavePostRequestInner?: Array<SubjectSubjectSavePostRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/subjectSave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectSubjectSavePostRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新
         * @param {Array<SubjectSubjectUpdatePostRequestInner>} [subjectSubjectUpdatePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectUpdatePost: async (subjectSubjectUpdatePostRequestInner?: Array<SubjectSubjectUpdatePostRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject/subjectUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectSubjectUpdatePostRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceSubjectControllerApi - functional programming interface
 * @export
 */
export const ServiceSubjectControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceSubjectControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除
         * @param {Array<SubjectDeletePostRequestInner>} [subjectDeletePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectDeletePost(subjectDeletePostRequestInner?: Array<SubjectDeletePostRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectDeletePost(subjectDeletePostRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 科目体系维护_列表查询
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectGetSubjectListPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectGetSubjectListPost(subjectGetSubjectListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 批量审核×
         * @param {Array<SubjectSubjectCheckPostRequestInner>} [subjectSubjectCheckPostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner?: Array<SubjectSubjectCheckPostRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 导出
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectSubjectExportPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectSubjectExportPost(subjectGetSubjectListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新加
         * @param {Array<SubjectSubjectSavePostRequestInner>} [subjectSubjectSavePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectSubjectSavePost(subjectSubjectSavePostRequestInner?: Array<SubjectSubjectSavePostRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectSubjectSavePost(subjectSubjectSavePostRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新
         * @param {Array<SubjectSubjectUpdatePostRequestInner>} [subjectSubjectUpdatePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner?: Array<SubjectSubjectUpdatePostRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceSubjectControllerApi - factory interface
 * @export
 */
export const ServiceSubjectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceSubjectControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除
         * @param {Array<SubjectDeletePostRequestInner>} [subjectDeletePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectDeletePost(subjectDeletePostRequestInner?: Array<SubjectDeletePostRequestInner>, options?: any): AxiosPromise<object> {
            return localVarFp.subjectDeletePost(subjectDeletePostRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 科目体系维护_列表查询
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectGetSubjectListPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.subjectGetSubjectListPost(subjectGetSubjectListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量审核×
         * @param {Array<SubjectSubjectCheckPostRequestInner>} [subjectSubjectCheckPostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner?: Array<SubjectSubjectCheckPostRequestInner>, options?: any): AxiosPromise<object> {
            return localVarFp.subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导出
         * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectExportPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.subjectSubjectExportPost(subjectGetSubjectListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新加
         * @param {Array<SubjectSubjectSavePostRequestInner>} [subjectSubjectSavePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectSavePost(subjectSubjectSavePostRequestInner?: Array<SubjectSubjectSavePostRequestInner>, options?: any): AxiosPromise<object> {
            return localVarFp.subjectSubjectSavePost(subjectSubjectSavePostRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新
         * @param {Array<SubjectSubjectUpdatePostRequestInner>} [subjectSubjectUpdatePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner?: Array<SubjectSubjectUpdatePostRequestInner>, options?: any): AxiosPromise<object> {
            return localVarFp.subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceSubjectControllerApi - object-oriented interface
 * @export
 * @class ServiceSubjectControllerApi
 * @extends {BaseAPI}
 */
export class ServiceSubjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary 删除
     * @param {Array<SubjectDeletePostRequestInner>} [subjectDeletePostRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectDeletePost(subjectDeletePostRequestInner?: Array<SubjectDeletePostRequestInner>, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectDeletePost(subjectDeletePostRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 科目体系维护_列表查询
     * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectGetSubjectListPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectGetSubjectListPost(subjectGetSubjectListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量审核×
     * @param {Array<SubjectSubjectCheckPostRequestInner>} [subjectSubjectCheckPostRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner?: Array<SubjectSubjectCheckPostRequestInner>, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectSubjectCheckPost(subjectSubjectCheckPostRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 导出
     * @param {SubjectGetSubjectListPostRequest} [subjectGetSubjectListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectSubjectExportPost(subjectGetSubjectListPostRequest?: SubjectGetSubjectListPostRequest, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectSubjectExportPost(subjectGetSubjectListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新加
     * @param {Array<SubjectSubjectSavePostRequestInner>} [subjectSubjectSavePostRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectSubjectSavePost(subjectSubjectSavePostRequestInner?: Array<SubjectSubjectSavePostRequestInner>, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectSubjectSavePost(subjectSubjectSavePostRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新
     * @param {Array<SubjectSubjectUpdatePostRequestInner>} [subjectSubjectUpdatePostRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSubjectControllerApi
     */
    public subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner?: Array<SubjectSubjectUpdatePostRequestInner>, options?: AxiosRequestConfig) {
        return ServiceSubjectControllerApiFp(this.configuration).subjectSubjectUpdatePost(subjectSubjectUpdatePostRequestInner, options).then((request) => request(this.axios, this.basePath));
    }
}
