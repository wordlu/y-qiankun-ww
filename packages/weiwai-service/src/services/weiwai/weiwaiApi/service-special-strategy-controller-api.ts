/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MailRulesDeletePostRequest } from '../weiwaiModel';
// @ts-ignore
import { SpecialStrategyGetSpecialListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { SpecialStrategySpecialCheckPostRequest } from '../weiwaiModel';
// @ts-ignore
import { SpecialStrategySpecialStrategySavePostRequest } from '../weiwaiModel';
// @ts-ignore
import { SpecialStrategySpecialUpdatePostRequest } from '../weiwaiModel';
/**
 * ServiceSpecialStrategyControllerApi - axios parameter creator
 * @export
 */
export const ServiceSpecialStrategyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getOrgList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyGetOrgListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/getOrgList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getSpecialList
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyGetSpecialListPost: async (specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/getSpecialList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialStrategyGetSpecialListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/investMgrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyInvestMgrListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/investMgrList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialCheck
         * @param {SpecialStrategySpecialCheckPostRequest} [specialStrategySpecialCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialCheckPost: async (specialStrategySpecialCheckPostRequest?: SpecialStrategySpecialCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/specialCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialStrategySpecialCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialExport
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialExportPost: async (specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/specialExport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialStrategyGetSpecialListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialInfo
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialInfoPost: async (mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/specialInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialStrategySave
         * @param {SpecialStrategySpecialStrategySavePostRequest} [specialStrategySpecialStrategySavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialStrategySavePost: async (specialStrategySpecialStrategySavePostRequest?: SpecialStrategySpecialStrategySavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/specialStrategySave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialStrategySpecialStrategySavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialUpdate
         * @param {SpecialStrategySpecialUpdatePostRequest} [specialStrategySpecialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialUpdatePost: async (specialStrategySpecialUpdatePostRequest?: SpecialStrategySpecialUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/specialUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialStrategySpecialUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/trustmngrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyTrustmngrListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialStrategy/trustmngrList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceSpecialStrategyControllerApi - functional programming interface
 * @export
 */
export const ServiceSpecialStrategyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceSpecialStrategyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getOrgList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategyGetOrgListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategyGetOrgListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getSpecialList
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/investMgrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategyInvestMgrListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategyInvestMgrListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialCheck
         * @param {SpecialStrategySpecialCheckPostRequest} [specialStrategySpecialCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest?: SpecialStrategySpecialCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialExport
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialInfo
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategySpecialInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategySpecialInfoPost(mailRulesDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialStrategySave
         * @param {SpecialStrategySpecialStrategySavePostRequest} [specialStrategySpecialStrategySavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest?: SpecialStrategySpecialStrategySavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialUpdate
         * @param {SpecialStrategySpecialUpdatePostRequest} [specialStrategySpecialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest?: SpecialStrategySpecialUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/trustmngrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specialStrategyTrustmngrListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specialStrategyTrustmngrListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceSpecialStrategyControllerApi - factory interface
 * @export
 */
export const ServiceSpecialStrategyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceSpecialStrategyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getOrgList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyGetOrgListPost(options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategyGetOrgListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/getSpecialList
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/investMgrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyInvestMgrListPost(options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategyInvestMgrListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialCheck
         * @param {SpecialStrategySpecialCheckPostRequest} [specialStrategySpecialCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest?: SpecialStrategySpecialCheckPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialExport
         * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialInfo
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategySpecialInfoPost(mailRulesDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialStrategySave
         * @param {SpecialStrategySpecialStrategySavePostRequest} [specialStrategySpecialStrategySavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest?: SpecialStrategySpecialStrategySavePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/specialUpdate
         * @param {SpecialStrategySpecialUpdatePostRequest} [specialStrategySpecialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest?: SpecialStrategySpecialUpdatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/specialStrategy/trustmngrList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specialStrategyTrustmngrListPost(options?: any): AxiosPromise<object> {
            return localVarFp.specialStrategyTrustmngrListPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceSpecialStrategyControllerApi - object-oriented interface
 * @export
 * @class ServiceSpecialStrategyControllerApi
 * @extends {BaseAPI}
 */
export class ServiceSpecialStrategyControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/getOrgList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategyGetOrgListPost(options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategyGetOrgListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/getSpecialList
     * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategyGetSpecialListPost(specialStrategyGetSpecialListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/investMgrList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategyInvestMgrListPost(options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategyInvestMgrListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/specialCheck
     * @param {SpecialStrategySpecialCheckPostRequest} [specialStrategySpecialCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest?: SpecialStrategySpecialCheckPostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategySpecialCheckPost(specialStrategySpecialCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/specialExport
     * @param {SpecialStrategyGetSpecialListPostRequest} [specialStrategyGetSpecialListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest?: SpecialStrategyGetSpecialListPostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategySpecialExportPost(specialStrategyGetSpecialListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/specialInfo
     * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategySpecialInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategySpecialInfoPost(mailRulesDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/specialStrategySave
     * @param {SpecialStrategySpecialStrategySavePostRequest} [specialStrategySpecialStrategySavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest?: SpecialStrategySpecialStrategySavePostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategySpecialStrategySavePost(specialStrategySpecialStrategySavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/specialUpdate
     * @param {SpecialStrategySpecialUpdatePostRequest} [specialStrategySpecialUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest?: SpecialStrategySpecialUpdatePostRequest, options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategySpecialUpdatePost(specialStrategySpecialUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/specialStrategy/trustmngrList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSpecialStrategyControllerApi
     */
    public specialStrategyTrustmngrListPost(options?: AxiosRequestConfig) {
        return ServiceSpecialStrategyControllerApiFp(this.configuration).specialStrategyTrustmngrListPost(options).then((request) => request(this.axios, this.basePath));
    }
}
