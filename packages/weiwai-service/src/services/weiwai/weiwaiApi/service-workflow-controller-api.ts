/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkflowAddPostRequest } from '../weiwaiModel';
// @ts-ignore
import { WorkflowDeletePostRequest } from '../weiwaiModel';
// @ts-ignore
import { WorkflowEditPostRequest } from '../weiwaiModel';
// @ts-ignore
import { WorkflowQueryPostRequest } from '../weiwaiModel';
// @ts-ignore
import { WorkflowStatePostRequest } from '../weiwaiModel';
/**
 * ServiceWorkflowControllerApi - axios parameter creator
 * @export
 */
export const ServiceWorkflowControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/add
         * @param {WorkflowAddPostRequest} [workflowAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowAddPost: async (workflowAddPostRequest?: WorkflowAddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowAddPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/delete
         * @param {WorkflowDeletePostRequest} [workflowDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowDeletePost: async (workflowDeletePostRequest?: WorkflowDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/edit
         * @param {WorkflowEditPostRequest} [workflowEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowEditPost: async (workflowEditPostRequest?: WorkflowEditPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowEditPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/query
         * @param {WorkflowQueryPostRequest} [workflowQueryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowQueryPost: async (workflowQueryPostRequest?: WorkflowQueryPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowQueryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/queryWf
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowQueryWfPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/queryWf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/state
         * @param {WorkflowStatePostRequest} [workflowStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowStatePost: async (workflowStatePostRequest?: WorkflowStatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowStatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceWorkflowControllerApi - functional programming interface
 * @export
 */
export const ServiceWorkflowControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceWorkflowControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/add
         * @param {WorkflowAddPostRequest} [workflowAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowAddPost(workflowAddPostRequest?: WorkflowAddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowAddPost(workflowAddPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/delete
         * @param {WorkflowDeletePostRequest} [workflowDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowDeletePost(workflowDeletePostRequest?: WorkflowDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowDeletePost(workflowDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/edit
         * @param {WorkflowEditPostRequest} [workflowEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowEditPost(workflowEditPostRequest?: WorkflowEditPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowEditPost(workflowEditPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/query
         * @param {WorkflowQueryPostRequest} [workflowQueryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowQueryPost(workflowQueryPostRequest?: WorkflowQueryPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowQueryPost(workflowQueryPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/queryWf
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowQueryWfPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowQueryWfPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/state
         * @param {WorkflowStatePostRequest} [workflowStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowStatePost(workflowStatePostRequest?: WorkflowStatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowStatePost(workflowStatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceWorkflowControllerApi - factory interface
 * @export
 */
export const ServiceWorkflowControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceWorkflowControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/add
         * @param {WorkflowAddPostRequest} [workflowAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowAddPost(workflowAddPostRequest?: WorkflowAddPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.workflowAddPost(workflowAddPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/delete
         * @param {WorkflowDeletePostRequest} [workflowDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowDeletePost(workflowDeletePostRequest?: WorkflowDeletePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.workflowDeletePost(workflowDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/edit
         * @param {WorkflowEditPostRequest} [workflowEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowEditPost(workflowEditPostRequest?: WorkflowEditPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.workflowEditPost(workflowEditPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/query
         * @param {WorkflowQueryPostRequest} [workflowQueryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowQueryPost(workflowQueryPostRequest?: WorkflowQueryPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.workflowQueryPost(workflowQueryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/queryWf
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowQueryWfPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.workflowQueryWfPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/workflow/state
         * @param {WorkflowStatePostRequest} [workflowStatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowStatePost(workflowStatePostRequest?: WorkflowStatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.workflowStatePost(workflowStatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceWorkflowControllerApi - object-oriented interface
 * @export
 * @class ServiceWorkflowControllerApi
 * @extends {BaseAPI}
 */
export class ServiceWorkflowControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/add
     * @param {WorkflowAddPostRequest} [workflowAddPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowAddPost(workflowAddPostRequest?: WorkflowAddPostRequest, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowAddPost(workflowAddPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/delete
     * @param {WorkflowDeletePostRequest} [workflowDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowDeletePost(workflowDeletePostRequest?: WorkflowDeletePostRequest, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowDeletePost(workflowDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/edit
     * @param {WorkflowEditPostRequest} [workflowEditPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowEditPost(workflowEditPostRequest?: WorkflowEditPostRequest, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowEditPost(workflowEditPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/query
     * @param {WorkflowQueryPostRequest} [workflowQueryPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowQueryPost(workflowQueryPostRequest?: WorkflowQueryPostRequest, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowQueryPost(workflowQueryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/queryWf
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowQueryWfPost(body?: object, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowQueryWfPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/workflow/state
     * @param {WorkflowStatePostRequest} [workflowStatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceWorkflowControllerApi
     */
    public workflowStatePost(workflowStatePostRequest?: WorkflowStatePostRequest, options?: AxiosRequestConfig) {
        return ServiceWorkflowControllerApiFp(this.configuration).workflowStatePost(workflowStatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
