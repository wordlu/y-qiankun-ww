/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrgSubjTypeBatchAuditPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeBatchDeletePostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeCodeListPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeEditPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeExportExcelPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeIgnoreMappingPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeSearchPostRequest } from '../weiwaiModel';
// @ts-ignore
import { OrgSubjTypeSubjSavePostRequest } from '../weiwaiModel';
/**
 * ServiceOrgSubjTypeControllerApi - axios parameter creator
 * @export
 */
export const ServiceOrgSubjTypeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量审核
         * @param {OrgSubjTypeBatchAuditPostRequest} [orgSubjTypeBatchAuditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeBatchAuditPost: async (orgSubjTypeBatchAuditPostRequest?: OrgSubjTypeBatchAuditPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/batchAudit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeBatchAuditPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量删除
         * @param {OrgSubjTypeBatchDeletePostRequest} [orgSubjTypeBatchDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeBatchDeletePost: async (orgSubjTypeBatchDeletePostRequest?: OrgSubjTypeBatchDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/batchDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeBatchDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 联动
         * @param {OrgSubjTypeCodeListPostRequest} [orgSubjTypeCodeListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeCodeListPost: async (orgSubjTypeCodeListPostRequest?: OrgSubjTypeCodeListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/codeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeCodeListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑
         * @param {OrgSubjTypeEditPostRequest} [orgSubjTypeEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeEditPost: async (orgSubjTypeEditPostRequest?: OrgSubjTypeEditPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeEditPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导出
         * @param {OrgSubjTypeExportExcelPostRequest} [orgSubjTypeExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeExportExcelPost: async (orgSubjTypeExportExcelPostRequest?: OrgSubjTypeExportExcelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/exportExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeExportExcelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeIgnoreMappingPost: async (orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/ignoreMapping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeIgnoreMappingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeOrgSubjTypeViewPost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/orgSubjTypeView`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 科目投资大类维护_查询
         * @param {OrgSubjTypeSearchPostRequest} [orgSubjTypeSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeSearchPost: async (orgSubjTypeSearchPostRequest?: OrgSubjTypeSearchPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeSearchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增
         * @param {OrgSubjTypeSubjSavePostRequest} [orgSubjTypeSubjSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeSubjSavePost: async (orgSubjTypeSubjSavePostRequest?: OrgSubjTypeSubjSavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgSubjType/subjSave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgSubjTypeSubjSavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceOrgSubjTypeControllerApi - functional programming interface
 * @export
 */
export const ServiceOrgSubjTypeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceOrgSubjTypeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 批量审核
         * @param {OrgSubjTypeBatchAuditPostRequest} [orgSubjTypeBatchAuditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest?: OrgSubjTypeBatchAuditPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 批量删除
         * @param {OrgSubjTypeBatchDeletePostRequest} [orgSubjTypeBatchDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest?: OrgSubjTypeBatchDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 联动
         * @param {OrgSubjTypeCodeListPostRequest} [orgSubjTypeCodeListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest?: OrgSubjTypeCodeListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 编辑
         * @param {OrgSubjTypeEditPostRequest} [orgSubjTypeEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeEditPost(orgSubjTypeEditPostRequest?: OrgSubjTypeEditPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeEditPost(orgSubjTypeEditPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 导出
         * @param {OrgSubjTypeExportExcelPostRequest} [orgSubjTypeExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest?: OrgSubjTypeExportExcelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查看
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeOrgSubjTypeViewPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeOrgSubjTypeViewPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 科目投资大类维护_查询
         * @param {OrgSubjTypeSearchPostRequest} [orgSubjTypeSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest?: OrgSubjTypeSearchPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增
         * @param {OrgSubjTypeSubjSavePostRequest} [orgSubjTypeSubjSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest?: OrgSubjTypeSubjSavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceOrgSubjTypeControllerApi - factory interface
 * @export
 */
export const ServiceOrgSubjTypeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceOrgSubjTypeControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 批量审核
         * @param {OrgSubjTypeBatchAuditPostRequest} [orgSubjTypeBatchAuditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest?: OrgSubjTypeBatchAuditPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量删除
         * @param {OrgSubjTypeBatchDeletePostRequest} [orgSubjTypeBatchDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest?: OrgSubjTypeBatchDeletePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 联动
         * @param {OrgSubjTypeCodeListPostRequest} [orgSubjTypeCodeListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest?: OrgSubjTypeCodeListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑
         * @param {OrgSubjTypeEditPostRequest} [orgSubjTypeEditPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeEditPost(orgSubjTypeEditPostRequest?: OrgSubjTypeEditPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeEditPost(orgSubjTypeEditPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导出
         * @param {OrgSubjTypeExportExcelPostRequest} [orgSubjTypeExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest?: OrgSubjTypeExportExcelPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 忽略
         * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeOrgSubjTypeViewPost(body?: string, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeOrgSubjTypeViewPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 科目投资大类维护_查询
         * @param {OrgSubjTypeSearchPostRequest} [orgSubjTypeSearchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest?: OrgSubjTypeSearchPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增
         * @param {OrgSubjTypeSubjSavePostRequest} [orgSubjTypeSubjSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest?: OrgSubjTypeSubjSavePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceOrgSubjTypeControllerApi - object-oriented interface
 * @export
 * @class ServiceOrgSubjTypeControllerApi
 * @extends {BaseAPI}
 */
export class ServiceOrgSubjTypeControllerApi extends BaseAPI {
    /**
     * 
     * @summary 批量审核
     * @param {OrgSubjTypeBatchAuditPostRequest} [orgSubjTypeBatchAuditPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest?: OrgSubjTypeBatchAuditPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeBatchAuditPost(orgSubjTypeBatchAuditPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量删除
     * @param {OrgSubjTypeBatchDeletePostRequest} [orgSubjTypeBatchDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest?: OrgSubjTypeBatchDeletePostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeBatchDeletePost(orgSubjTypeBatchDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 联动
     * @param {OrgSubjTypeCodeListPostRequest} [orgSubjTypeCodeListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest?: OrgSubjTypeCodeListPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeCodeListPost(orgSubjTypeCodeListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑
     * @param {OrgSubjTypeEditPostRequest} [orgSubjTypeEditPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeEditPost(orgSubjTypeEditPostRequest?: OrgSubjTypeEditPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeEditPost(orgSubjTypeEditPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 导出
     * @param {OrgSubjTypeExportExcelPostRequest} [orgSubjTypeExportExcelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest?: OrgSubjTypeExportExcelPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeExportExcelPost(orgSubjTypeExportExcelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 忽略
     * @param {OrgSubjTypeIgnoreMappingPostRequest} [orgSubjTypeIgnoreMappingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest?: OrgSubjTypeIgnoreMappingPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeIgnoreMappingPost(orgSubjTypeIgnoreMappingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查看
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeOrgSubjTypeViewPost(body?: string, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeOrgSubjTypeViewPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 科目投资大类维护_查询
     * @param {OrgSubjTypeSearchPostRequest} [orgSubjTypeSearchPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest?: OrgSubjTypeSearchPostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeSearchPost(orgSubjTypeSearchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增
     * @param {OrgSubjTypeSubjSavePostRequest} [orgSubjTypeSubjSavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceOrgSubjTypeControllerApi
     */
    public orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest?: OrgSubjTypeSubjSavePostRequest, options?: AxiosRequestConfig) {
        return ServiceOrgSubjTypeControllerApiFp(this.configuration).orgSubjTypeSubjSavePost(orgSubjTypeSubjSavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
