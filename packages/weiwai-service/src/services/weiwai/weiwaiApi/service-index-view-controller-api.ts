/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IndexViewExportExcelPostRequest } from '../weiwaiModel';
// @ts-ignore
import { IndexViewGetListPostRequest } from '../weiwaiModel';
/**
 * ServiceIndexViewControllerApi - axios parameter creator
 * @export
 */
export const ServiceIndexViewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/exportExcel
         * @param {IndexViewExportExcelPostRequest} [indexViewExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexViewExportExcelPost: async (indexViewExportExcelPostRequest?: IndexViewExportExcelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/indexView/exportExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexViewExportExcelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/getList
         * @param {IndexViewGetListPostRequest} [indexViewGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexViewGetListPost: async (indexViewGetListPostRequest?: IndexViewGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/indexView/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexViewGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceIndexViewControllerApi - functional programming interface
 * @export
 */
export const ServiceIndexViewControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceIndexViewControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/exportExcel
         * @param {IndexViewExportExcelPostRequest} [indexViewExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexViewExportExcelPost(indexViewExportExcelPostRequest?: IndexViewExportExcelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexViewExportExcelPost(indexViewExportExcelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/getList
         * @param {IndexViewGetListPostRequest} [indexViewGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexViewGetListPost(indexViewGetListPostRequest?: IndexViewGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexViewGetListPost(indexViewGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceIndexViewControllerApi - factory interface
 * @export
 */
export const ServiceIndexViewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceIndexViewControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/exportExcel
         * @param {IndexViewExportExcelPostRequest} [indexViewExportExcelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexViewExportExcelPost(indexViewExportExcelPostRequest?: IndexViewExportExcelPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexViewExportExcelPost(indexViewExportExcelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary http://127.0.0.1:8080/indexView/getList
         * @param {IndexViewGetListPostRequest} [indexViewGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexViewGetListPost(indexViewGetListPostRequest?: IndexViewGetListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.indexViewGetListPost(indexViewGetListPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceIndexViewControllerApi - object-oriented interface
 * @export
 * @class ServiceIndexViewControllerApi
 * @extends {BaseAPI}
 */
export class ServiceIndexViewControllerApi extends BaseAPI {
    /**
     * 
     * @summary http://127.0.0.1:8080/indexView/exportExcel
     * @param {IndexViewExportExcelPostRequest} [indexViewExportExcelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceIndexViewControllerApi
     */
    public indexViewExportExcelPost(indexViewExportExcelPostRequest?: IndexViewExportExcelPostRequest, options?: AxiosRequestConfig) {
        return ServiceIndexViewControllerApiFp(this.configuration).indexViewExportExcelPost(indexViewExportExcelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary http://127.0.0.1:8080/indexView/getList
     * @param {IndexViewGetListPostRequest} [indexViewGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceIndexViewControllerApi
     */
    public indexViewGetListPost(indexViewGetListPostRequest?: IndexViewGetListPostRequest, options?: AxiosRequestConfig) {
        return ServiceIndexViewControllerApiFp(this.configuration).indexViewGetListPost(indexViewGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
