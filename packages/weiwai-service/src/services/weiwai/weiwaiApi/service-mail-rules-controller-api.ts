/* tslint:disable */
/* eslint-disable */
/**
 * 委外
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MailRulesCheckPostRequest } from '../weiwaiModel';
// @ts-ignore
import { MailRulesDeletePostRequest } from '../weiwaiModel';
// @ts-ignore
import { MailRulesDownVailePostRequest } from '../weiwaiModel';
// @ts-ignore
import { MailRulesGetMailRulesListPostRequest } from '../weiwaiModel';
/**
 * ServiceMailRulesControllerApi - axios parameter creator
 * @export
 */
export const ServiceMailRulesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {MailRulesCheckPostRequest} [mailRulesCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesCheckPost: async (mailRulesCheckPostRequest?: MailRulesCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDeletePost: async (mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 校验文件(下载)
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDownVailePost: async (mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/downVaile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesDownVailePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载
         * @param {string} parsingRules 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDownloadPost: async (parsingRules: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parsingRules' is not null or undefined
            assertParamExists('mailRulesDownloadPost', 'parsingRules', parsingRules)
            const localVarPath = `/mailRules/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (parsingRules !== undefined) { 
                localVarFormParams.append('parsingRules', parsingRules as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 解析规则维护-列表查询
         * @param {MailRulesGetMailRulesListPostRequest} [mailRulesGetMailRulesListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesGetMailRulesListPost: async (mailRulesGetMailRulesListPostRequest?: MailRulesGetMailRulesListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/getMailRulesList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesGetMailRulesListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesInfoPost: async (mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取结构信息
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesQueryFileContentPost: async (mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mailRules/queryFileContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailRulesDownVailePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {File} file 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesRegisterPost: async (matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, file: File, wfType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchFile' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'matchFile', matchFile)
            // verify required parameter 'matchTitle' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'matchTitle', matchTitle)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'orgId', orgId)
            // verify required parameter 'parsingRules' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'parsingRules', parsingRules)
            // verify required parameter 'sender' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'sender', sender)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'file', file)
            // verify required parameter 'wfType' is not null or undefined
            assertParamExists('mailRulesRegisterPost', 'wfType', wfType)
            const localVarPath = `/mailRules/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (matchFile !== undefined) { 
                localVarFormParams.append('matchFile', matchFile as any);
            }
    
            if (matchTitle !== undefined) { 
                localVarFormParams.append('matchTitle', matchTitle as any);
            }
    
            if (orgId !== undefined) { 
                localVarFormParams.append('orgId', orgId as any);
            }
    
            if (parsingRules !== undefined) { 
                localVarFormParams.append('parsingRules', parsingRules as any);
            }
    
            if (sender !== undefined) { 
                localVarFormParams.append('sender', sender as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (wfType !== undefined) { 
                localVarFormParams.append('wfType', wfType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑
         * @param {File} file 
         * @param {string} id 
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesUpdatePost: async (file: File, id: string, matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, wfType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'file', file)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'id', id)
            // verify required parameter 'matchFile' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'matchFile', matchFile)
            // verify required parameter 'matchTitle' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'matchTitle', matchTitle)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'orgId', orgId)
            // verify required parameter 'parsingRules' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'parsingRules', parsingRules)
            // verify required parameter 'sender' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'sender', sender)
            // verify required parameter 'wfType' is not null or undefined
            assertParamExists('mailRulesUpdatePost', 'wfType', wfType)
            const localVarPath = `/mailRules/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (matchFile !== undefined) { 
                localVarFormParams.append('matchFile', matchFile as any);
            }
    
            if (matchTitle !== undefined) { 
                localVarFormParams.append('matchTitle', matchTitle as any);
            }
    
            if (orgId !== undefined) { 
                localVarFormParams.append('orgId', orgId as any);
            }
    
            if (parsingRules !== undefined) { 
                localVarFormParams.append('parsingRules', parsingRules as any);
            }
    
            if (sender !== undefined) { 
                localVarFormParams.append('sender', sender as any);
            }
    
            if (wfType !== undefined) { 
                localVarFormParams.append('wfType', wfType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceMailRulesControllerApi - functional programming interface
 * @export
 */
export const ServiceMailRulesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceMailRulesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {MailRulesCheckPostRequest} [mailRulesCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesCheckPost(mailRulesCheckPostRequest?: MailRulesCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesCheckPost(mailRulesCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesDeletePost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesDeletePost(mailRulesDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 校验文件(下载)
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesDownVailePost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesDownVailePost(mailRulesDownVailePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 下载
         * @param {string} parsingRules 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesDownloadPost(parsingRules: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesDownloadPost(parsingRules, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 解析规则维护-列表查询
         * @param {MailRulesGetMailRulesListPostRequest} [mailRulesGetMailRulesListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest?: MailRulesGetMailRulesListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查看
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesInfoPost(mailRulesDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取结构信息
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesQueryFileContentPost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesQueryFileContentPost(mailRulesDownVailePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {File} file 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesRegisterPost(matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, file: File, wfType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesRegisterPost(matchFile, matchTitle, orgId, parsingRules, sender, file, wfType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 编辑
         * @param {File} file 
         * @param {string} id 
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailRulesUpdatePost(file: File, id: string, matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, wfType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRulesUpdatePost(file, id, matchFile, matchTitle, orgId, parsingRules, sender, wfType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceMailRulesControllerApi - factory interface
 * @export
 */
export const ServiceMailRulesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceMailRulesControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 审核、反审核
         * @param {MailRulesCheckPostRequest} [mailRulesCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesCheckPost(mailRulesCheckPostRequest?: MailRulesCheckPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesCheckPost(mailRulesCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDeletePost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesDeletePost(mailRulesDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 校验文件(下载)
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDownVailePost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesDownVailePost(mailRulesDownVailePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载
         * @param {string} parsingRules 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesDownloadPost(parsingRules: string, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesDownloadPost(parsingRules, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 解析规则维护-列表查询
         * @param {MailRulesGetMailRulesListPostRequest} [mailRulesGetMailRulesListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest?: MailRulesGetMailRulesListPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看
         * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesInfoPost(mailRulesDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取结构信息
         * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesQueryFileContentPost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesQueryFileContentPost(mailRulesDownVailePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {File} file 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesRegisterPost(matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, file: File, wfType: string, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesRegisterPost(matchFile, matchTitle, orgId, parsingRules, sender, file, wfType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑
         * @param {File} file 
         * @param {string} id 
         * @param {string} matchFile 
         * @param {string} matchTitle 
         * @param {string} orgId 
         * @param {string} parsingRules 
         * @param {string} sender 
         * @param {string} wfType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailRulesUpdatePost(file: File, id: string, matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, wfType: string, options?: any): AxiosPromise<object> {
            return localVarFp.mailRulesUpdatePost(file, id, matchFile, matchTitle, orgId, parsingRules, sender, wfType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceMailRulesControllerApi - object-oriented interface
 * @export
 * @class ServiceMailRulesControllerApi
 * @extends {BaseAPI}
 */
export class ServiceMailRulesControllerApi extends BaseAPI {
    /**
     * 
     * @summary 审核、反审核
     * @param {MailRulesCheckPostRequest} [mailRulesCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesCheckPost(mailRulesCheckPostRequest?: MailRulesCheckPostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesCheckPost(mailRulesCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesDeletePost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesDeletePost(mailRulesDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 校验文件(下载)
     * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesDownVailePost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesDownVailePost(mailRulesDownVailePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 下载
     * @param {string} parsingRules 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesDownloadPost(parsingRules: string, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesDownloadPost(parsingRules, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 解析规则维护-列表查询
     * @param {MailRulesGetMailRulesListPostRequest} [mailRulesGetMailRulesListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest?: MailRulesGetMailRulesListPostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesGetMailRulesListPost(mailRulesGetMailRulesListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查看
     * @param {MailRulesDeletePostRequest} [mailRulesDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesInfoPost(mailRulesDeletePostRequest?: MailRulesDeletePostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesInfoPost(mailRulesDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取结构信息
     * @param {MailRulesDownVailePostRequest} [mailRulesDownVailePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesQueryFileContentPost(mailRulesDownVailePostRequest?: MailRulesDownVailePostRequest, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesQueryFileContentPost(mailRulesDownVailePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增
     * @param {string} matchFile 
     * @param {string} matchTitle 
     * @param {string} orgId 
     * @param {string} parsingRules 
     * @param {string} sender 
     * @param {File} file 
     * @param {string} wfType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesRegisterPost(matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, file: File, wfType: string, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesRegisterPost(matchFile, matchTitle, orgId, parsingRules, sender, file, wfType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑
     * @param {File} file 
     * @param {string} id 
     * @param {string} matchFile 
     * @param {string} matchTitle 
     * @param {string} orgId 
     * @param {string} parsingRules 
     * @param {string} sender 
     * @param {string} wfType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceMailRulesControllerApi
     */
    public mailRulesUpdatePost(file: File, id: string, matchFile: string, matchTitle: string, orgId: string, parsingRules: string, sender: string, wfType: string, options?: AxiosRequestConfig) {
        return ServiceMailRulesControllerApiFp(this.configuration).mailRulesUpdatePost(file, id, matchFile, matchTitle, orgId, parsingRules, sender, wfType, options).then((request) => request(this.axios, this.basePath));
    }
}
